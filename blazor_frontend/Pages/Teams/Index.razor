@page "/Teams"
@using blazor_frontend.Models
@using static System.Net.WebRequestMethods
@using System.Net.Http.Json
@inject HttpClient Http

<PageTitle>Teams</PageTitle>

<h1 class="text-center mb-3">Teams</h1>

<a class="btn btn-primary mb-3" href="/Teams/Create">New Team</a>

@if (teams == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var team in teams)
            {
                <tr>
                    <td>@team.Id</td>
                    <td>@team.Name</td>
                    <td style="white-space:nowrap">
                        <a class="btn btn-primary btn-sm" href="/Teams/@team.Id/Edit">Edit</a>
                        <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteDialog(team)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (DeleteDialogOpen)
{
    <ModalDialog Title="Delete" Text="Are you want to delete this item?" OnClose="@OnDeleteDialogClose"></ModalDialog>
}

@code {
    private List<Team>? teams;

    protected override async Task OnInitializedAsync()
    {
        teams = await Http.GetFromJsonAsync<List<Team>>("https://localhost:7068/Teams");
    }

    private bool DeleteDialogOpen { get; set; }

    private Team? teamToDelete;

    private async void OnDeleteDialogClose(bool isDelete)
    {
        if (isDelete)
        {
            await DeleteTeam(teamToDelete);
            teamToDelete = null;
            await OnInitializedAsync();
        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteDialog(Team team)
    {
        DeleteDialogOpen = true;
        teamToDelete = team;
        StateHasChanged();
    }

    protected async Task DeleteTeam(Team team)
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "access_token");


        string tokenVal = TokenHelper.ConvertToken(token);
        // var respone = await Http.DeleteAsync($"https:localhost:7068/Championships/{championship.Id}");
        var request = new HttpRequestMessage(HttpMethod.Delete, $"https://localhost:7068/Teams/{team.Id}");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", tokenVal);

        var response = await Http.SendAsync(request);
    }
}
