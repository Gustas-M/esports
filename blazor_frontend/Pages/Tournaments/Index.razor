@page "/Championships/{id:int}/Tournaments"
@using blazor_frontend.Models
@using static System.Net.WebRequestMethods
@using System.Net.Http.Json
@inject HttpClient Http


<PageTitle>Tournaments</PageTitle>

<h1 class="text-center mb-3">Tournaments</h1>

<a class="btn btn-primary mb-3" href="/Championships/@id/Tournaments/Create">New Tournament</a>

@if (tournaments == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Number of Rounds</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tournament in tournaments)
            {
                <tr>
                    <td>@tournament.Id</td>
                    <td>@tournament.Name</td>
                    <td>@tournament.Number_of_rounds</td>
                    <td style="white-space:nowrap">
                        <a class="btn btn-primary btn-sm" href="/Championships/@id/Tournaments/@tournament.Id/Edit">Edit</a>
                        <a class="btn btn-secondary btn-sm" href="/Championships/@id/Tournaments/@tournament.Id/Matches">View</a>
                        <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteDialog(tournament)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (DeleteDialogOpen)
{
    <ModalDialog Title="Delete" Text="Are you want to delete this item?" OnClose="@OnDeleteDialogClose"></ModalDialog>
}

@code {
    [Parameter]
    public int id { get; set; }
    private List<Tournament>? tournaments;

    private bool DeleteDialogOpen { get; set; }

    private Tournament? tournamentToDelete;

    protected override async Task OnInitializedAsync()
    {
        tournaments = await Http.GetFromJsonAsync<List<Tournament>>($"https://walrus-app-irwkx.ondigitalocean.app/Championships/{id}/Tournaments");
        tournaments.OrderBy(t => t.Id);
    }

    private async void OnDeleteDialogClose(bool isDelete)
    {
        if (isDelete)
        {
            await DeleteTournament(tournamentToDelete);
            tournamentToDelete = null;
            await OnInitializedAsync();
        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteDialog(Tournament tournament)
    {
        DeleteDialogOpen = true;
        tournamentToDelete = tournament;
        StateHasChanged();
    }

    protected async Task DeleteTournament(Tournament tournament)
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "access_token");


        string tokenVal = TokenHelper.ConvertToken(token);
        // var respone = await Http.DeleteAsync($"https:localhost:7068/Championships/{championship.Id}");
        var request = new HttpRequestMessage(HttpMethod.Delete, $"https://localhost:7068/Championships/{id}/Tournaments/{tournament.Id}");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", tokenVal);

        var response = await Http.SendAsync(request);
    }
}